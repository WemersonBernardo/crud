{"name":"PHP CRUD","tagline":"Generic PHP CRUD Library","body":"[![Latest Stable Version](https://poser.pugx.org/arjunkomath/crud/v/stable)](https://packagist.org/packages/arjunkomath/crud) [![Total Downloads](https://poser.pugx.org/arjunkomath/crud/downloads)](https://packagist.org/packages/arjunkomath/crud) [![Latest Unstable Version](https://poser.pugx.org/arjunkomath/crud/v/unstable)](https://packagist.org/packages/arjunkomath/crud)\r\n[![Documentation Status](https://readthedocs.org/projects/phpcrud/badge/?version=latest)](https://readthedocs.org/projects/phpcrud/?badge=latest)\r\n\r\nA simple generic PHP CRUD library\r\n***\r\n*Please note that this project is still in *beta*, it's not complete. There are more features to come.*\r\n\r\n#Features\r\n- Perform Create/Read/Update/Delete for you in just one line. :)\r\n- In case, you don't feel like writing the views for all those, it will automatically generate the views also, and perform the corresponding operation.\r\n- All views are generated using Bootstrap CSS.\r\n\r\n#Documentation\r\nThe documentation is hosted on Read the Docs: [phpcrud.rtfd.org](http://phpcrud.readthedocs.org/en/latest/)\r\n\r\n#Requirements\r\n- [j4mie/idiorm] (https://github.com/j4mie/idiorm)\r\n- MySQL\r\n- And of course, PHP\r\n\r\n#Installation\r\n##Packagist\r\nThis library is available through Packagist with the vendor and package identifier of `arjunkomath/crud`\r\nPlease see the Packagist [documentation](https://packagist.org/) for further information.\r\n\r\n##Configuration\r\nConfigue idiorm, you can read more about it [here](http://idiorm.readthedocs.org/en/latest/configuration.html). You'll have to add the followng lines so that the CRUD class can access the database.\r\n\r\n```php\r\n<?php\r\nORM::configure('mysql:host=localhost;dbname=my_database');\r\nORM::configure('username', 'database_user');\r\nORM::configure('password', 'top_secret');\r\n```\r\n\r\n#Code\r\n##Basic CRUD\r\nInitialize the class\r\n```php\r\n$this->crud = new CRUD\\CRUD();\r\n```\r\nIt has three functions as follows:\r\n\r\n###Read\r\nThis function can be used to read data, either the entire table data or you can read a row by its primary key.\r\nTo read an entire table:\r\n```php\r\n$result = $this->crud->read('table_name');\r\n```\r\nTo read a row from a table by its primiary key:\r\n```php\r\n$result = $this->crud->read('table_name','id');\r\n```\r\n*All results are returned as array.*\r\n\r\n###Save\r\nThis function can be used to save data to table, you can both create a new row or update an exsising entry.\r\nTo create an entry: Specify the table name and then pass an array of arguments in such a format that array key represents the field name and value represents the field value. It will return the newly inserted id of the row.\r\n```php\r\n$result = $this->crud->save('table_name', array (\"column1\" => \"value1\", \"column2\" => \"value2\"));\r\n```\r\nTo update an entry identified by its primiary key: You pass an additional paremeter `id` that is the primary key value to the row to be updated. It will return the id of the row.\r\n```php\r\n$result = $this->crud->save('table_name', array (\"column1\" => \"value1\", \"column2\" => \"value2\"), 'id');\r\n```\r\n\r\n###Delete\r\nThis function can be used to delete an entry from table.\r\n```php\r\n$result = $this->crud->delete('table_name', 'id');\r\n```\r\nIt will return `true`.\r\n\r\n###Find\r\nThis function can be used to find a row by field name and value.\r\n```php\r\n$result = $this->crud->find('table_name', 'field_name', 'value');\r\n```\r\nIt will return an array if the row exsists.\r\n\r\n##CRUD and Views\r\nInitialize the class\r\n```php\r\n$this->crud = new CRUD\\Admin();\r\n```\r\nIt has four functions as follows:\r\n\r\n###Table\r\nThis function can be used to read data and display it in table format.\r\nTo display an entire table:\r\n```php\r\n$this->crud->table('table_name');\r\n```\r\nIt has an optional paramater, that lets you hide any unwanted fields. You can pass an array of field names, and it will automatically skip those fields from the view.\r\n```php\r\n$this->crud->table('table_name', array ('field_name'));\r\n```\r\n\r\n###Read\r\nThis function can be used to read data from a row and display it in table format.\r\n```php\r\n$this->crud->table('table_name', 'id');\r\n```\r\nIt has an optional paramater, that lets you hide any unwanted fields. You can pass an array of field names, and it will automatically skip those fields from the view.\r\n```php\r\n$this->crud->table('table_name', 'id', array ('field_name'));\r\n```\r\n\r\n###Create\r\nThis function can be used to input data from the user and save it to database, the CRUD class will automatically generate the views and save the entry to database.\r\n```php\r\n$this->crud->create('table_name');\r\n```\r\nIt has an optional paramater, that lets you hide any unwanted fields. You can pass an array of field names, and it will automatically skip those fields from the view. Note that no default values can be passed to these fields as of now, although it will be implemented in future.\r\n```php\r\n$this->crud->create('table_name', array ('field_name'));\r\n```\r\n\r\n###Update\r\nThis function can be used to update an exsisting entry in the table, the CRUD class will automatically generate the views and update the entry in database.\r\n```php\r\n$this->crud->update('table_name', 'id');\r\n```\r\nIt has an optional paramater, that lets you hide any unwanted fields. You can pass an array of field names, and it will automatically skip those fields from the view. Note that by default it will show the exsisting data saved in the row.\r\n```php\r\n$this->crud->create('table_name', 'id', array ('field_name'));\r\n```\r\n\r\nThank you.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}